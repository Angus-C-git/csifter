#!/usr/bin/python3

import sys
import argparse
import subprocess
from colorama import Fore, Style


import logging
from rich.logging import RichHandler
from rich import print
from csifter.sifter import sift

'''

  ____ ____ ___ _____ _____ _____ ____  
 / ___/ ___|_ _|  ___|_   _| ____|  _ \ 
| |   \___ \| || |_    | | |  _| | |_) |
| |___ ___) | ||  _|   | | | |___|  _ < 
 \____|____/___|_|     |_| |_____|_| \_\

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

 ‣ A poormans static analyser for C source
   audits
 ‣ Written badly in python  
 ‣ Do not trust this tool beyond identifying
   the most basic of potential vulnerabilities
'''

def main(args):
	""" start sift """
	for file in args.files:
		print(f'[bold][>->][/bold] Sifting sauce for [b green] {file}\n')
		sift(file)
		

def print_banner():
    print('''[bold red]
  ____ ____ ___ _____ _____ _____ ____      
 / ___/ ___|_ _|  ___|_   _| ____|  _ \     
| |   \___ \| || |_    | | |  _| | |_) |    
| |___ ___) | ||  _|   | | | |___|  _ <     
 \____|____/___|_|     |_| |_____|_| \_\    

 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>                          
    [/bold red]''')


if __name__ == "__main__":

    parser = argparse.ArgumentParser(
        description=print_banner(), 
        epilog=">> Should have gone to stacksavers ?"
    )

    parser.add_argument('-f', '--files',
                        nargs='+',
                        dest='files',
                        help = 'file(s) to audit',
                        )
  
    parser.add_argument('-p', '--path',
                          dest='path',
						  help='path to audit'
                        )

    args = parser.parse_args()

    if (len(sys.argv) == 1): parser.print_help()
    else: main(args)

